import math
import numpy as np
import matplotlib.pyplot as plt

_g = 9.81
_ton_to_kg = 0.907184   # conversion form short ton of force to kg-f (tonne)
_m_fairing = 2.5

_delta_v = 0
_distance_vertical = 0
m_payload = 10        # mass of payload, tonnes

# SRB Ariane 4
_m_srb = 12.66
_m_srb_fuel = 9.5
_t_srb = 34
m_dot_srb = _m_srb_fuel / _t_srb

no_srb = 4               # number of SRB
_thr_srb = 66.28 * _ton_to_kg        # thrust of a single SRB, tons, SL
_Isp_srb = 237.2         # SL

# booster - Long March CZ-5
_m_booster = 165        # 20 tons in case of reusability
_m_boosters_fuel = 152
_t_booster = 180
m_dot_booster = _m_boosters_fuel / _t_booster

no_boosters = 4                       # number of RB
_thr_booster = 244.7 * _ton_to_kg    # thrust of a single RB, short tons, SL
_Isp_booster_SL = 300
_Isp_booster_VAC = 335

# 1st stage   H-IIB                                    # 1st stage Long March CZ-5             H-IIB
_m_stage_1 = 202  # for wing ms += 36; ms = 1.5ms0  m_stage_1 = 175                       m_stage_1 = 202
_m_stage_1_fuel = 177.8                                # m_stage_1_fuel = 158                  m_stage_1_fuel = 177.8
_t_stage_1 = 352                                       # t_stage_1 = 500                       t_stage_1 = 352

m_dot_stage_1 = _m_stage_1_fuel / _t_stage_1
_thr_stage_1 = 219.6      # thrust, kg force, VAC             thr_stage_1 = 110                     thr_stage_1 = 179 SL
_Isp_stage_1_SL = 333                                  # Isp_stage_1_SL = 333                  Isp_stage_1_SL = 333
_Isp_stage_1_VAC = 440                                 # Isp_stage_1_VAC = 438                 Isp_stage_1_VAC = 440
#                                                       sigma = 0.0885                        sigma = 0.107

# 2nd stage   ESC-A
_m_stage_2 = 19.4
_m_stage_2_fuel = 14.9
_t_stage_2 = 945
m_dot_stage_2 = _m_stage_2_fuel / _t_stage_2

_Isp_stage_2_VAC = 446

# total mass
m_tot = no_srb * _m_srb + no_boosters * _m_booster + _m_stage_1 + _m_stage_2 + m_payload + _m_fairing

# average Isp with SRBs, Sea Level
Isp_ave_srb = (no_boosters * _thr_booster + _thr_stage_1 + no_srb * _thr_srb) / \
              (no_boosters * (_thr_booster / _Isp_booster_SL) + _thr_stage_1 / _Isp_stage_1_SL + no_srb * (
                      _thr_srb / _Isp_srb))

# average Isp during LM boosters phase, assuming SL
Isp_ave = (no_boosters * _thr_booster + _thr_stage_1) / \
          (no_boosters * (_thr_booster / _Isp_booster_VAC) + _thr_stage_1 / _Isp_stage_1_VAC)

# Necessary arrays
thr_weight_time = []
altitude = []
total_v_vertical = []
total_v_horizontal = []
g_load = []

# angles for gravity turn
initial_angle = int(input("Initial angle, deg: "))
final_angle = int(input("Final angle, deg: "))
delta_angle = -(initial_angle - final_angle)/(_t_booster - _t_srb)

angle = np.arange(initial_angle, final_angle, delta_angle)

# Rocket initial data
print("Total mass of the rocket:", m_tot,
      "\nthrust total at start, tonnes:", (no_srb * _thr_srb + no_boosters * _thr_booster + _thr_stage_1) * 0.9072,
      "\nT/W:", (no_srb * _thr_srb + no_boosters * _thr_booster + _thr_stage_1) * 0.9072/m_tot,
      "\n sigma:", (no_srb * (_m_srb - _m_srb_fuel) + no_boosters * (_m_booster - _m_boosters_fuel) +
                    (_m_stage_1 - _m_stage_1_fuel) + (_m_stage_2 - _m_stage_2_fuel) + m_payload)/m_tot,
      "\n paylod ratio:", m_payload/m_tot)
print()

# check if thrust at start is greater than the total weight

if ((no_srb * _thr_srb + no_boosters * _thr_booster + _thr_stage_1) * 0.9072) > m_tot:

    # Rocket flight
    # delta v SRB
    # assuming SL ISP
    for i in range(1, _t_srb):
        acceleration = Isp_ave_srb * 9.81 * math.log(m_tot / (m_tot - no_srb * m_dot_srb -
                                                              no_boosters * m_dot_booster - m_dot_stage_1))

        m_tot -= (no_srb * m_dot_srb + no_boosters * m_dot_booster + m_dot_stage_1)

        _delta_v += acceleration - 9.81
        _distance_vertical += _delta_v

        thr_weight_time.append((no_srb * _thr_srb + no_boosters * _thr_booster + _thr_stage_1 * 0.9072) / m_tot)
        total_v_vertical.append(_delta_v)
        total_v_horizontal.append(0)
        g_load.append(acceleration / 9.81)
        altitude.append(_distance_vertical/1000) # in km

    # speed gained from srb phase
    # accounting for gravity - assuming vertical flight
    delta_v_srb = _delta_v

    # change of mass after srb phase
    m_tot = no_boosters * (_m_booster - m_dot_booster * _t_srb) + \
                          (_m_stage_1 - m_dot_stage_1 * _t_srb) + _m_stage_2 + m_payload

    # based on the distance flown (oscillating ~ 7-9km) the atmosphere is around 40-30% density of SL
    # Henceforth, I assumed the use of Isp_VAC, although it overestimates the rocket performance

    # splitting v components
    _delta_v_vertical = _delta_v
    _change_v = _delta_v
    _delta_v_horizontal = 0


# delta v LM Rocket Booster phase
    for i in range(_t_srb, _t_booster):
        # changed vs according to Krzysztof's file
        acceleration = Isp_ave * 9.81 * math.log(m_tot / (m_tot - no_boosters * m_dot_booster - m_dot_stage_1))
        m_tot -= (no_boosters * m_dot_booster + m_dot_stage_1)

        _change_v += acceleration - 9.81 * math.sin(np.deg2rad(angle[i - _t_srb]))

        _delta_v_vertical = _change_v * math.sin(np.deg2rad(angle[i - _t_srb]))
        _delta_v_horizontal = _change_v * math.cos(np.deg2rad(angle[i - _t_srb]))
        # s = vt - 0.5at**2
        _distance_vertical += _delta_v_vertical + 0.5 * (acceleration * math.sin(np.deg2rad(angle[i - _t_srb])) - 9.81)

        thr_weight_time.append((no_boosters * _thr_booster + _thr_stage_1 * 0.9072) / m_tot)
        total_v_vertical.append(_delta_v_vertical)
        total_v_horizontal.append(_delta_v_horizontal)
        g_load.append(acceleration / 9.81)
        altitude.append(_distance_vertical/1000)    # in km

    # speed after this phase

    print("vertical alt.:", _distance_vertical/1000)
    print("delta v vertical:", _delta_v_vertical, "delta v horizontal:", _delta_v_horizontal)
    print()

    # rest of 1st stage
    m_tot = (_m_stage_1 - m_dot_stage_1 * _t_booster) + _m_stage_2 + m_payload - _m_fairing
    print(m_tot)

    for i in range(_t_booster, _t_stage_1):
        # improved as Krzystof's
        acceleration = _Isp_stage_1_VAC * 9.81 * math.log(m_tot / (m_tot - m_dot_stage_1))
        m_tot -= m_dot_stage_1

        _change_v += acceleration - 9.81 * math.sin(np.deg2rad(final_angle))
        _delta_v_vertical = _change_v * math.sin(np.deg2rad(final_angle))
        _delta_v_horizontal = _change_v * math.cos(np.deg2rad(final_angle))

        # s = vt - 0.5at**2
        _distance_vertical += _delta_v_vertical + 0.5 * (acceleration * math.sin(np.deg2rad(final_angle)) - 9.81)

        thr_weight_time.append((_thr_stage_1 * 0.9072) / m_tot)
        total_v_vertical.append(_delta_v_vertical)
        total_v_horizontal.append(_delta_v_horizontal)
        g_load.append(acceleration / 9.81)
        altitude.append(_distance_vertical/1000)    #in km

    # stats check
    print("vertical alt.:", _distance_vertical/1000)
    print("delta v vertical:", _delta_v_vertical, "delta v horizontal:", _delta_v_horizontal)
    print()

    # 2nd stage
    m_tot = _m_stage_2 + m_payload

    for i in range(_t_stage_1, (_t_stage_1 + _t_stage_2)):
        # according to Krzysztof's code
        acceleration = _Isp_stage_2_VAC * 9.81 * math.log(m_tot / (m_tot - m_dot_stage_2))
        m_tot -= m_dot_stage_2

        _change_v += acceleration - 9.81 * math.sin(np.deg2rad(final_angle))
        _delta_v_vertical = _change_v * math.sin(np.deg2rad(final_angle))
        _delta_v_horizontal = _change_v * math.cos(np.deg2rad(final_angle))

        # s = vt - 0.5at**2
        _distance_vertical += _delta_v_vertical + 0.5 * (acceleration * math.sin(np.deg2rad(final_angle)) - 9.81)

        thr_weight_time.append(6.24 * _ton_to_kg / m_tot)
        total_v_vertical.append(_delta_v_vertical)
        total_v_horizontal.append(_delta_v_horizontal)
        g_load.append(acceleration / 9.81)
        altitude.append(_distance_vertical/1000)    # in km
    # stats check
    print("vertical alt.:", _distance_vertical/1000)
    print("delta v vertical:", _delta_v_vertical, "delta v horizontal:", _delta_v_horizontal)
    print()
else:
    print("The rocket will not lift off!")


# necessary arrays
thrust = np.array(thr_weight_time)
time = np.arange(0, _t_stage_1 + _t_stage_2-1)

time_numpy = np.array(time)
velocity_horizontal_array = np.array(total_v_horizontal)
velocity_vertical_array = np.array(total_v_vertical)
altitude_array = np.array(altitude)
G_loads_array = np.array(g_load)

gamma = [90] * _t_srb
gamma = np.append(gamma, angle)
gamma = np.append(gamma, [final_angle] * (_t_stage_2 + _t_stage_1 - 1 - _t_booster))
print(gamma)

print(len(gamma), len(time))
# graphs
fig, (TW, velocity_horizontal, altitude, loads, flight_angle) = plt.subplots(5, 1)

TW.plot(time_numpy, thrust)
TW.set_ylabel("T/W ratio")

velocity_horizontal.plot(time_numpy, velocity_horizontal_array, label="horizontal v")
velocity_horizontal.plot(time_numpy, velocity_vertical_array)
velocity_horizontal.set_ylabel("velocity, m/s")

altitude.plot(time_numpy, altitude_array)
altitude.set_ylabel("altitude, km")

loads.plot(time_numpy, G_loads_array)
loads.set_ylabel("G-load")

flight_angle.plot(time_numpy, gamma)
flight_angle.set_xlabel("time, s")
flight_angle.set_ylabel("Flight angle, deg")

plt.show()

